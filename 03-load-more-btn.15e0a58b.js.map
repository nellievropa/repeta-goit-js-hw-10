{"mappings":"AAAA,MAEMA,EAAU,CACZC,QAAS,CACLC,cAJQ,qCCOhB,MAAMC,EAAO,CACTC,WAAYC,SAASC,cAAc,mBACnCC,kBAAmBF,SAASC,cAAc,iBAIxCE,EAAiB,IDLR,MACXC,cACJC,KAAKC,YAAc,GACnBD,KAAKE,KAAO,C,CAGgEC,gBAGvD,MAAHC,EAAM,uCAA4BJ,KAAKC,2CAA2CD,KAAKE,OAIS,OAAnGG,MAAMD,EAAKd,GACbgB,MAAKC,GAAYA,EAASC,SAC1BF,MAAK,EAACG,SAAEA,MAGeT,KAAfU,gBACLC,QAAQC,IAAI,kBAA+BZ,MAEpCS,I,CAMmBC,gBACtCV,KAAKE,MAAQ,C,CAGiEW,YAC9Eb,KAAKE,KAAO,C,CAKRY,YACA,OAAOd,KAAKC,W,CAGZa,UAAMC,GACNf,KAAKC,YAAcc,C,GClCrBC,EAAc,IChBL,MACXjB,aAAYkB,SAAEA,EAAQC,OAAEA,GAAS,IAC7BlB,KAAKmB,KAAOnB,KAAKoB,QAAQH,GAEzBC,GAAUlB,KAAKqB,M,CAInBD,QAAQH,GACR,MAAME,EAAO,GAKb,OAJAA,EAAKG,OAAS3B,SAASC,cAAcqB,GACrCE,EAAKI,MAAQJ,EAAKG,OAAO1B,cAAc,UACvCuB,EAAKK,QAAUL,EAAKG,OAAO1B,cAAc,YAElCuB,C,CAGXM,SACIzB,KAAKmB,KAAKG,OAAOI,UAAW,EAC5B1B,KAAKmB,KAAKI,MAAMI,YAAc,kBAChB3B,KAATmB,KAAKK,QAAQI,UAAUC,IAAI,Y,CAIhCC,UACA9B,KAAKmB,KAAKG,OAAOI,UAAW,EAC5B1B,KAAKmB,KAAKI,MAAMI,YAAc,mBAC9B3B,KAAKmB,KAAKK,QAAQI,UAAUG,OAAO,Y,CAGnCC,OACIhC,KAAKmB,KAAKG,OAAOM,UAAUG,OAAO,Y,CAItCV,OACIrB,KAAKmB,KAAKG,OAAOM,UAAUC,IAAI,Y,GDpBH,CAChCZ,SAAU,4BAEoCC,QAAtC,IAGNe,EAAetC,SAASC,cAAc,aAqGV,SAAzBsC,EAAcC,GACjBnB,EAAYc,UACdhC,EAAeK,gBAAgBG,MAAKG,KASR,SAAFA,GAE1B,MAAM2B,EAAS3B,EACd4B,KAAI,EAACC,WAAEA,EAAUC,MAAEA,EAAKC,OAAEA,EAAMC,YAAEA,KAC1B,yBACKH,qCACNC,+BACUC,mBACXC,0BAINC,KAAK,IAENT,EAAaU,mBAAmB,YAAaP,E,CAtBzCQ,CAAqBnC,GACrBO,EAAYS,QAAQ,G,CAxG5Bd,QAAQC,IAAII,GAOZvB,EAAKC,WAAWmD,iBAAiB,UAUJ,SAAXC,GAgBgB,GAdSA,EAArCC,iBAQNjD,EAAegB,MAAQgC,EAAEE,cAAcC,SAASnC,MAAMoC,MAM1B,KAAzBpD,EAAegB,MACd,OAAOqC,MAAM,2BAGbnC,EAAYgB,OAEiDlC,EAA9Ce,YA4FfpB,EAAKI,kBAAkBuD,UAAY,GA1FnClB,G,IA7BqClB,EAA7BG,KAAKG,OAAOuB,iBAAiB,QAASX","sources":["src/js/news-components.js","src/js/03-load-more-btn.js","src/js/components/load-more-btn.js"],"sourcesContent":["const API_KEY = '15038c1cf1024f0f88ddd0a11fc0f440';\nconst BASE_URL = 'https://newsapi.org/v2';\nconst options = {\n    headers: {\n        Authorization: API_KEY,\n    },\n    };\n    // відповідає за збереження терміну запросу і номер групи(бо на сторінці ми отримаємо групу даних) \nexport default class NewsApiService {\n    constructor() {\nthis.searchQuery = '';\nthis.page = 1;\n    }\n// метод просто забираає статті з бекенду і повертає статті, що він забрав, у зовнішній код\n    fetchArticles() {\n        // console.log('До запросу: ', this);\n   \n            const url = `${BASE_URL}/everything?q=${this.searchQuery}&language=en&pageSize=8&page=${this.page}`;\n            \n          // робимо запит, і якщо він вдалий, то збільшуємо сторінку на 1(якщо не вдалий нам це не треба)\n        //   щоб мати можливість створити зовнішній вигляд статті у зовнішньому коді, нам  потрібно повернути цей fetch у зовнішній код командою return\n        return fetch(url, options)\n            .then(response => response.json())\n            .then(({ articles }) => {\n                // console.log(data);\n                // this.page += 1; винесли у зовнішній код\n                this.incrementPage();\n                console.log('Після запросу: ', this);\n\n                return articles;\n            });\n    }\n\n// можна винестиу зовнішній код додавання сторінки \n\nincrementPage() {\n    this.page += 1;\n}\n// сторінка повинна оновлюватись при новому запиті і починати шукати з 1-ї сторінки знову, тому робимо reset()\nresetPage() {\n    this.page = 1;\n}\n\n// контролює термін запроса: отримати і зберегти\n    // збережемо нашу змінну класу searchQuery\n    get query() {\n        return this.searchQuery;\n    }\n\n    set query(newQuery) {\n        this.searchQuery = newQuery;\n    }\n}","// import articlesTpl from '../templates/articles.hbs'\nimport '../css/common.css';\nimport NewsApiService from './news-components';\nimport LoadMoreBtn from './components/load-more-btn';\n\n\n\nconst refs = {\n    searchForm: document.querySelector('.js-search-form'),\n    articlesContainer: document.querySelector('.js-articles'),\n    // loadMoreBtn: document.querySelector('[data-action=\"load more\"]')\n};\n// створюємо екземпляр классу NewsApiService\nconst newsApiService = new NewsApiService();\n\n// для кнопки\nconst loadMoreBtn = new LoadMoreBtn({\n    selector: '[data-action=\"load more\"]',\n    // щоб зробити її невидимою, звертаємось до конструктора\n    hidden: true,\n});\n\nconst articlesList = document.querySelector(\".articles\");\nconsole.log(loadMoreBtn);\n\n// працюємо з кнопкою\n// додаем її методи, наприклад show() і потім додаємо їх там, де треба всередині функцій\n// loadMoreBtn.show();\n// loadMoreBtn.disable();\n\nrefs.searchForm.addEventListener('submit', onSearch);\n// refs.loadMoreBtn.addEventListener('click', onLoadMore);\n// щоб звернутися до кнопки тепер треба подивитися на її властивості в консолі і так по черзі всі їх і записати!\n// loadMoreBtn.refs.button.addEventListener('click', onLoadMore)\n// тут змінюєм назву функції onLoadMore на fetchArticles (щоб не дублювати код!)\nloadMoreBtn.refs.button.addEventListener('click', fetchArticles)\n// щоб прибрати цю глобальну змінну ми в класі NewsApiService створимо її заміну this.searchQuery = ''; і там же будемо її запам'ятовувати\n// let searchQuery ='';\n// і тоді ми можемо її прибрати звідси\n\nfunction onSearch(e) {\n    // щоб не перезавантажувалась сторінка робимоа preventDefault\n    e.preventDefault();\n\n// очищуємо сторінку перед новим запитом\n// clearArticlesContainer();\n\n// отримуєм доступ до форми, щоб читати запити\n// тут достукуємось також до цієї змінної\n//  searchQuery = e.currentTarget.elements.query.value\nnewsApiService.query = e.currentTarget.elements.query.value;\n\n// без GET i SET верхній запис буде виглядати так \n// newsApiService.searchQuery = e.currentTarget.elements.query.value; тоді треба замінити на searchQuery всюди\n\n// напишемо попередження про пусту строку\nif(newsApiService.query === '') {\n    return alert(`Please, make a request!`)\n    }\n    \n    loadMoreBtn.show();\n    // під час сабміту сторінка буде онвлюватись до 1-ї, коли ми пишемо новий запит\n    newsApiService.resetPage();\n    clearArticlesContainer();\n    fetchArticles();\n\n\n// При сабміті форми треба викликати сторінку на  newsapi.org\n    // const options = {\n    //     headers: {\n    //         Authorization: '15038c1cf1024f0f88ddd0a11fc0f440',\n    //     },\n    //     };\n        \n    //     const url = `https://newsapi.org/v2/everything?q=${searchQuery}&language=en&pageSize=8&page=1`;\n      \n    //     fetch(url, options)\n    //     .then(r => r.json)\n    //     .then(console.log());\n    // всю цю логіку виносимо в окремий спеціально створений файл news-components\n    // і після того, як ми створили екземпляр классу NewsApiService і викликали його вище, звертаємось до нього\n    // а  searchQuery  передаємо йому як аргумент\n    // тут додаємо articles\n    // loadMoreBtn.disable();\n    // newsApiService.fetchArticles().then(articles => {\n        \n    //     appendArticlesMarkup(articles);\n    //     // якщо у нас все добре то включаємо кнопку знову\n    //     loadMoreBtn.enable();\n    // });\n    // однаковий код винесли в окрему функцію і додали її сюди зверху\n}\n\n// ми хочемо підгружати наступні сторінки при натисканні кнопки \"Показати ще\"\n// робим те саме, АЛЕ маємо проблему як достукатися до змінної const searchQuery ,якщо вона існує тільки в попередній функції?\n// тобто під час сабміту (натискання кнопки \"Пошук\") ми повинні зберігати десь ці данні, щоб потім їх взяти звідти! використовуємо LET\nfunction onLoadMore() {\n    // спочатку відключимо кнопку\n    // loadMoreBtn.disable();\n    // а потім однаковий код винесемо в окрему функцію\n\n    // const options = {\n    //     headers: {\n    //         Authorization: '15038c1cf1024f0f88ddd0a11fc0f440',\n    //     },\n    //     };\n        \n    //     const url = `https://newsapi.org/v2/everything?q=${searchQuery}&language=en&pageSize=8&page=1`;\n        \n        \n    //     fetch(url, options)\n    //     .then(r => r.json)\n    //     .then(console.log());\n    // в цій функції все робимо аналогічно\n    // а тут знову ключимо кнопку\n    // newsApiService.fetchArticles().then(articles => {\n    //     appendArticlesMarkup(articles);\n    //     loadMoreBtn.enable();\n    // });\n    // однаковий код винесемо в окрему функцію\n}\n\n// однаковий код виносимо в окрему функцію\nfunction fetchArticles(argument) {\n      loadMoreBtn.disable();\n    newsApiService.fetchArticles().then(articles => {\n        appendArticlesMarkup(articles);\n        loadMoreBtn.enable();\n    });\n}\n\n\n// що створити розмітку зробимо функцію\n\nfunction appendArticlesMarkup(articles) {\n    // refs.articlesContainer.insertAdjacentHTML('beforeend', articlesTpl(articles));\n    const markup = articles\n    .map(({ urlToImage, title, author, description }) => {\n      return `<li>\n      <img src=\"${urlToImage}\" alt=\"\" width=\"480\">\n      <h2>${title}</h2>\n      <p>Posted by: ${author}</p>\n      <p>${description}</p>\n\n       </li>`;\n    })\n    .join(\"\");\n    // articlesList.innerHTML = markup;\n    articlesList.insertAdjacentHTML(\"beforeend\", markup)\n}\n\n// при кожному новому запиті треба очищати контайнер, щоб виводилось не в кінці попереднього запиту, а зверху і знову\n\nfunction clearArticlesContainer() {\n    refs.articlesContainer.innerHTML = '';\n}\n\n\n\n\n","export default class LoadMoreBtn {\n    constructor({ selector, hidden = false }) { \n        this.refs = this.getRefs(selector);\n\n        hidden && this.hide();\n    }\n\n\n    getRefs(selector) {\n    const refs = {};\n    refs.button = document.querySelector(selector);\n    refs.label = refs.button.querySelector('.label');\n    refs.spinner = refs.button.querySelector('.spinner');\n\n    return refs;\n}\n\nenable() {\n    this.refs.button.disabled = false;\n    this.refs.label.textContent = 'Показати більше';\n    this.refs.spinner.classList.add('is-hidden');\n\n    }\n    \n    disable() {\n    this.refs.button.disabled = true;\n    this.refs.label.textContent = 'Завантажуємо....';\n    this.refs.spinner.classList.remove('is-hidden');\n    }\n\n    show() {\n        this.refs.button.classList.remove('is-hidden');\n\n    }\n\n    hide() {\n        this.refs.button.classList.add('is-hidden');\n\n    }\n}\n\n"],"names":["$234681ecda4a62b0$var$options","headers","Authorization","$dbfbdf498c2a314a$var$refs","searchForm","document","querySelector","articlesContainer","$dbfbdf498c2a314a$var$newsApiService","constructor","this","searchQuery","page","fetchArticles","url","fetch","then","response","json","articles","incrementPage","console","log","resetPage","query","newQuery","$dbfbdf498c2a314a$var$loadMoreBtn","selector","hidden","refs","getRefs","hide","button","label","spinner","enable","disabled","textContent","classList","add","disable","remove","show","$dbfbdf498c2a314a$var$articlesList","$dbfbdf498c2a314a$var$fetchArticles","argument","markup","map","urlToImage","title","author","description","join","insertAdjacentHTML","$dbfbdf498c2a314a$var$appendArticlesMarkup","addEventListener","e","preventDefault","currentTarget","elements","value","alert","innerHTML"],"version":3,"file":"03-load-more-btn.15e0a58b.js.map"}